-- 1. List the number of films per category.
	SELECT c.name AS "Category", COUNT(fc.film_id) AS "Number_of_films"
    FROM sakila.category AS c
    INNER JOIN sakila.film_category as fc
    ON c.category_id = fc.category_id
    GROUP BY c.name
    ORDER BY COUNT(fc.film_id) DESC;
    
-- 2. Retrieve the store ID, city, and country for each store.
	SELECT s.store_id, c.city, cty.country
    FROM sakila.store AS s
    JOIN sakila.address AS a
    ON s.address_id = a.address_id
    JOIN sakila.city AS c
    ON c.city_id = a.city_id
    JOIN sakila.country AS cty
    ON cty.country_id = c.country_id;
    
-- 3.  Calculate the total revenue generated by each store in dollars.
	SELECT store.store_id, SUM(payment.amount) AS "Revenue"
    FROM sakila.store
    INNER JOIN sakila.staff 
    ON store.store_id = staff.store_id
    INNER JOIN sakila.payment 
    ON payment.staff_id = staff.staff_id
    GROUP BY store_id;
	
-- 4.  Determine the average running time of films for each category.
	SELECT c.name AS "Category", AVG(f.length) AS "Average_runtime"
    FROM sakila.category AS c
    INNER JOIN sakila.film_category AS fc
    ON c.category_id = fc.category_id
    INNER JOIN sakila.film AS f
    ON f.film_id = fc.film_id
    GROUP BY c.name
    ORDER BY AVG(f.length) DESC;

-- **Bonus**:

-- 5.  Identify the film categories with the longest average running time.
	SELECT c.name AS "Category", AVG(f.length) AS "Longest_average_runtime"
    FROM sakila.category AS c
    INNER JOIN sakila.film_category AS fc
    ON c.category_id = fc.category_id
    INNER JOIN sakila.film AS f
    ON f.film_id = fc.film_id
    GROUP BY c.name
    ORDER BY AVG(f.length) DESC
    LIMIT 1;
    
-- 6.  Display the top 10 most frequently rented movies in descending order.
	SELECT f.title AS 'Film', COUNT(r.rental_id) AS 'Times_rented'
    FROM sakila.film AS f
    JOIN sakila.inventory AS i
    ON f.film_id = i.film_id
    JOIN sakila.rental AS r
    ON r.inventory_id = i.inventory_id
    GROUP BY f.title
    ORDER BY COUNT(r.rental_id) DESC
    LIMIT 10;
    
-- 7. Determine if "Academy Dinosaur" can be rented from Store 1.
	SELECT DISTINCT f.title, s.store_id
    FROM sakila.film AS f
    JOIN sakila.inventory AS i
    ON f.film_id = i.film_id
    JOIN sakila.store as s 
    ON s.store_id = i.store_id
    WHERE s.store_id = 1 AND f.title = 'Academy Dinosaur'; 
    
-- 8. Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column indicating whether each title is 'Available' or 'NOT available.' Note that there are 42 titles that are not in the inventory, and this information can be obtained using a `CASE` statement combined with `IFNULL`."
	SELECT DISTINCT f.title AS Film,
		CASE
			WHEN i.inventory_id IS NULL THEN 'Not Available'
            ELSE 'Available'
		END AS 'Availability'
	FROM sakila.film AS f
    LEFT JOIN sakila.inventory AS i 
    ON f.film_id = i.film_id
    ORDER BY Film ASC;
	